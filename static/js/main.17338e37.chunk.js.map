{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["top100Films","title","year","App","b","useState","course","setCourse","dourse","setDourse","setTitle","moment","toDate","startDateState","setStartDate","endDate","setEndDate","token","setToken","courses","setCourses","useEffect","arr","Axios","get","then","response","data","results","error","console","log","getFullYear","addEvent","syear","smonth","getMonth","toString","padStart","sday","getDate","shours","getHours","sminutes","getMinutes","eyear","emonth","eday","ehours","eminutes","post","subject","body","contentType","content","start","dateTime","timeZone","end","location","displayName","attendees","emailAddress","address","name","type","headers","Authorization","className","TextField","color","label","variant","onChange","event","target","value","inputStyle","padding","style","backgroundColor","borderRadius","borderWidth","borderColor","utils","MomentUtils","date","disablePast","minDate","Autocomplete","options","getOptionLabel","option","width","margin","alignSelf","onInputChange","newValue","renderInput","params","Button","onClick","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.17338e37.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Axios from 'axios';\nimport { MuiPickersUtilsProvider,DateTimePicker, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport {Autocomplete} from '@material-ui/lab'\nimport MomentUtils from '@date-io/moment';\nimport moment from 'moment';\nimport { TextField,Button,CardHeader } from '@material-ui/core';\n\nfunction App() {\n  const [date,setDate]=useState(1);\n  const [course,setCourse]=useState('');\n  const [dourse,setDourse]=useState('');\n  const [units,setUnits]=useState('');\n  const [title,setTitle]=useState('');\n  const [startDateState,setStartDate]=useState(moment().toDate());\n  const [endDate,setEndDate]=useState(moment().toDate())\n  const [token,setToken]=useState('');\n  var a,b,c,d;\n  const [courses,setCourses]=useState(['']);\n  //var token='eyJ0eXAiOiJKV1QiLCJub25jZSI6Ii1lenZEMVcteW9OT1JlOEhiT2VnaVNtM0JFWk52RVN4UkxPXzQ2MlFmOUkiLCJhbGciOiJSUzI1NiIsIng1dCI6ImppYk5ia0ZTU2JteFBZck45Q0ZxUms0SzRndyIsImtpZCI6ImppYk5ia0ZTU2JteFBZck45Q0ZxUms0SzRndyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC82ZjM2NDRlOC03YjcxLTQ3OTgtODA5MS00MGZhOWU4MDQ4ZDYvIiwiaWF0IjoxNTk5NzQ2NTA2LCJuYmYiOjE1OTk3NDY1MDYsImV4cCI6MTU5OTc1MDQwNiwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFTUUEyLzhRQUFBQS81T2hDcnErUS9EeXF5d2I0YzJ5VWRpU2FEbWt6TWFyL1RjNGVhSk00UHc9IiwiYW1yIjpbInB3ZCJdLCJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBleHBsb3JlciAob2ZmaWNpYWwgc2l0ZSkiLCJhcHBpZCI6ImRlOGJjOGI1LWQ5ZjktNDhiMS1hOGFkLWI3NDhkYTcyNTA2NCIsImFwcGlkYWNyIjoiMCIsImdpdmVuX25hbWUiOiJMYXhtaSIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjEwNi41MS4yNDMuMzYiLCJuYW1lIjoiTGF4bWkiLCJvaWQiOiIyYWIwODNiMi0zYzNkLTQ0NWEtOTcwNC04MzY2NmRmYzg2MTYiLCJwbGF0ZiI6IjE0IiwicHVpZCI6IjEwMDMyMDAwRDI3RjREOEIiLCJyaCI6IjAuQUFBQTZFUTJiM0Y3bUVlQWtVRDZub0JJMXJYSWk5NzUyYkZJcUsyM1NOcHlVR1FZQUlFLiIsInNjcCI6IkNhbGVuZGFycy5SZWFkV3JpdGUgb3BlbmlkIHByb2ZpbGUgVXNlci5SZWFkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiYmN4aTVzZ1VZUFJvai1zdmFTcWtLMWg4MndVX0drSDBjcWxtLWM5Q1ZpSSIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6IjZmMzY0NGU4LTdiNzEtNDc5OC04MDkxLTQwZmE5ZTgwNDhkNiIsInVuaXF1ZV9uYW1lIjoiTGF4bWlAdnRlYW1sYWJzLmNvbSIsInVwbiI6IkxheG1pQHZ0ZWFtbGFicy5jb20iLCJ1dGkiOiJIc2xLbDlJVVAweWIyeXh5aVFFYkFBIiwidmVyIjoiMS4wIiwid2lkcyI6WyJiNzlmYmY0ZC0zZWY5LTQ2ODktODE0My03NmIxOTRlODU1MDkiXSwieG1zX3N0Ijp7InN1YiI6IlVvSkFuQjFIa2EwWFZYT1pZM3pzTmxsZXpzNzJCTUYxancyTzVtMzUwcW8ifSwieG1zX3RjZHQiOjE0NDM0MjA2MDR9.wTRSUxLd6bRGzMt6qrk8MxLxEKwU9GxRa_Hcveqh_2_1XLCzyPRh3uhUP_3JIE6yj5uKCrIXDBmLmwrs5ein7mMFEW7oGLG9HmQ9DPxVW_urq2npfopL9w8mqDOMMOLE5UbjeAI45AWliKpVQ6DO8GmcN-uVY3hsiRfo4c96AV6eYuYefj9M4mbIDXJDVY2K9kG9tWcBlqp_qjli5AUIDjWLI2uRWqDM9fGv1f8F0HWpFDLaSI2_S8KPP3kRQLzxZYJXtkTzs3TBqM4jrL70llj88pcBu4PtbbGzTHY0jdpaV9c_cSJ-3IEzBvOlfrAM2mBPY6pa5AH1Q3tb5Y5BHA';\n\n  useEffect(()=>{\n    var arr=[];\n    Axios.get('https://edxvteam.com/api/courses/v1/courses/')\n    .then((response)=>{\n      arr=response.data.results;\n      setCourses(arr);\n    },(error)=>{\n      console.log(error);\n    })\n    console.log(startDateState.getFullYear());\n  },[]);\n\n  const addEvent=()=>{\n\n    const syear  = startDateState.getFullYear();\n    const smonth = (startDateState.getMonth() + 1).toString().padStart(2, \"0\");\n    const sday   = startDateState.getDate().toString().padStart(2, \"0\");\n    const shours= startDateState.getHours().toString().padStart(2,\"0\");\n    const sminutes= startDateState.getMinutes().toString().padStart(2,\"0\")\n    const eyear  = endDate.getFullYear();\n    const emonth = (endDate.getMonth() + 1).toString().padStart(2, \"0\");\n    const eday   = endDate.getDate().toString().padStart(2, \"0\");\n    const ehours= endDate.getHours().toString().padStart(2,\"0\");\n    const eminutes= endDate.getMinutes().toString().padStart(2,\"0\")\n    //alert(`${startDateState.getFullYear()}-${startDateState.getMonth()}-${startDateState.getDate()}T${startDateState.getHours()}:${startDateState.getMinutes()}:00${endDate.getFullYear()}-${endDate.getMonth()}-${endDate.getDate()}T${endDate.getHours()}:${endDate.getMinutes()}:00`)\n    Axios.post('https://graph.microsoft.com/v1.0/me/calendars/AAMkAGUxYzhmYWViLTk3Y2MtNGNlOC04OTYyLWEzMDk2ODg5M2M1NgBGAAAAAAD9QiWpkpRiTLHApXmB7B8lBwC2pBhdGQNITo-78bb6qcJDAAAAAAEGAAC2pBhdGQNITo-78bb6qcJDAAAeos5PAAA=/events'\n            ,\n            {\n              subject: title,\n              body: {\n                contentType: \"HTML\",\n                content: course+dourse\n              },\n              start: {\n                  dateTime: `${syear}-${smonth}-${sday}T${shours}:${sminutes}:00`,\n                  timeZone: \"India Standard Time\"\n              },\n              end: {\n                  dateTime: `${eyear}-${emonth}-${eday}T${ehours}:${eminutes}:00`,\n                  timeZone: \"India Standard Time\"\n              },\n              location:{\n                  displayName:\"Microsoft team\"\n              },\n              attendees: [\n                {\n                  emailAddress: {\n                    address:\"students@gmail.com\",\n                    name: \"student 1\"\n                  },\n                  type: \"required\"\n                }\n              ]\n            },\n            {\n              headers: { Authorization: `Bearer ${token}` }\n          }).then((response)=>{\n            console.log(response);\n          },(error)=>{\n            console.log(error);\n          })\n          //alert(`${startDateState.getFullYear()}-${startDateState.getMonth()}-${startDateState.getDate()}T${startDateState.getHours()}:${startDateState.getMinutes()}:00${endDate.getFullYear()}-${endDate.getMonth()}-${endDate.getDate()}T${endDate.getHours()}:${endDate.getMinutes()}:00`)\n\n  }\n  \n   \n  const clicky=(event)=>{\n    a=event.target.value;\n    } \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Schedule a class</p> \n      </header>\n      <body className='Bady'>\n        \n    <div className=\"Form\">\n      <div className=\"Division\">\n        <p className=\"TextTitle\">Meeting Title</p>\n        <TextField\n            color=\"white\"\n            type='text'\n            label='Enter the meeting title'\n            variant='outlined'\n            onChange={(event)=> {\n              setTitle(event.target.value);\n              b=event.target.value;\n            console.log(b)}}\n            inputStyle={{color: 'white', padding: '0 25px'}}\n            style={{ backgroundColor: 'rgba(255,255,255,0.9)', borderRadius: 10000,borderWidth: 5,borderColor: 'black' }}\n          />\n      </div>\n      <div className=\"HorizontalDivision\">\n        <div className=\"Division\">\n          <p className=\"TextTitle\">Start Date</p>\n            <MuiPickersUtilsProvider utils={MomentUtils} >\n              <KeyboardDateTimePicker \n              variant='dialog' \n              onChange={(date)=>{console.log(date);\n                setStartDate(date.toDate())}}\n              value={startDateState}\n              disablePast/>\n            </MuiPickersUtilsProvider>\n        </div>\n        <div className=\"Division\">\n          <p className=\"TextTitle\">End Date</p>\n            <MuiPickersUtilsProvider utils={MomentUtils} >\n              <KeyboardDateTimePicker \n              variant='dialog' \n              minDate={startDateState}\n              value={endDate}\n              onChange={(date)=>{setEndDate(date.toDate())}}\n              />\n            </MuiPickersUtilsProvider>\n        </div>\n      </div>\n      <div className='Division'>\n        <p className=\"TextTitle\">Select the course</p>\n        <Autocomplete options={courses}\n            getOptionLabel={(option) => option.name}\n            style={{width: '100%', margin: 0,alignSelf: 'center' }}\n            onInputChange={(event,newValue)=>{setCourse(newValue)\n            }}\n            renderInput={(params) => <TextField {...params} label=\"Select the course\" variant=\"outlined\"   />}/>\n      </div>\n      <div className='Division'>\n        <p className=\"TextTitle\">Select the unit</p>\n        <Autocomplete options={top100Films}\n            getOptionLabel={(option) => option.title}\n            style={{width: '100%', margin: 0,alignSelf: 'center' }}\n            onInputChange={(event,newValue)=>setDourse(newValue)}\n            renderInput={(params) => <TextField {...params} label=\"Select course unit\" variant=\"outlined\" />}/>\n      </div>\n      <div className='Division'>\n        <p className=\"TextTitle\">API KEY</p>\n        <TextField onChange={(event)=>{setToken(event.target.value)\n        console.log(token)}}\n            />\n      </div>\n      <div className=\"HorizontalDivision\">\n      <Button onClick={addEvent} variant='contained' color='secondary' style={{margin: 30}} >Cancel</Button>\n       <Button onClick={addEvent} variant='contained' color='primary' style={{margin: 30}} >Submit</Button>\n       \n      </div>\n      \n    </div>\n      \n        </body>\n    </div>\n  );\n}\n\n\n\nconst top100Films = [\n  { title: 'Unit 1', year: 1994 },\n  { title: 'Unit 2', year: 1994 },\n  { title: 'Unit 3', year: 1994 },\n  { title: 'Unit 4', year: 1994 }\n  \n];\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}